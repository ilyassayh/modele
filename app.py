import streamlit as st
import joblib
import pandas as pd
import google.generativeai as genai
from PIL import Image
import json
import re
from datetime import datetime
import base64
import os
from dotenv import load_dotenv
from pathlib import Path

try:
    import plotly.graph_objects as go
    import plotly.express as px
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

st.set_page_config(
    page_title="Estimateur de Co√ªt de R√©paration Auto Pro",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDzVhetJLHiv357wc1X-0XgbbfYktqHO-c")
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

@st.cache_resource
def load_models():
    try:
        model_path = Path("gradient_boosting_model.pkl")
        preprocessor_path = Path("preprocessor.pkl")
        
        if not model_path.exists() or not preprocessor_path.exists():
            st.error("Les fichiers de mod√®le sont introuvables. Veuillez v√©rifier que les fichiers suivants existent :")
            st.error("- gradient_boosting_model.pkl")
            st.error("- preprocessor.pkl")
            return None, None
            
        best_model = joblib.load(model_path)
        preprocessor = joblib.load(preprocessor_path)
        
        if best_model is None or preprocessor is None:
            st.error("Erreur lors du chargement des mod√®les : les mod√®les sont vides")
            return None, None
            
        return best_model, preprocessor
    except Exception as e:
        st.error(f"Erreur lors du chargement des mod√®les: {str(e)}")
        return None, None

best_model, preprocessor = load_models()
if best_model is None or preprocessor is None:
    st.stop()

brands = ['Dacia', 'Renault', 'Peugeot', 'Hyundai', 'Volkswagen', 'Toyota', 'Fiat', 'Ford', 'Mercedes', 'BMW']
models = {
    'Dacia': ['Logan', 'Sandero', 'Duster'],
    'Renault': ['Clio', 'Megane', 'Kangoo'],
    'Peugeot': ['208', '301', '308'],
    'Hyundai': ['i10', 'i20', 'Tucson'],
    'Volkswagen': ['Polo', 'Golf', 'Passat'],
    'Toyota': ['Yaris', 'Corolla', 'RAV4'],
    'Fiat': ['Panda', 'Tipo', '500'],
    'Ford': ['Fiesta', 'Focus', 'EcoSport'],
    'Mercedes': ['C-Class', 'E-Class', 'A-Class'],
    'BMW': ['Series 1', 'Series 3', 'X1']
}
car_parts = ['Porte arri√®re gauche', 'Aile arri√®re droite', 'Aile arri√®re gauche', 'Pare-brise arri√®re', 'Coffre', 'Feu arri√®re droit', 'Feu arri√®re gauche', 'Pare-choc arri√®re', 'Plaque d\'immatriculation arri√®re', 'Pare-choc avant', 'Capot', 'Grille', 'Phare avant gauche', 'Phare avant droit']
car_parts_en = ['Left rear door', 'Right rear wing', 'Left rear wing', 'Rear windshield', 'Trunk', 'Right rear light', 'Left rear light', 'Rear bumper', 'Rear license plate', 'Front bumper', 'Hood', 'Grille', 'Left headlight', 'Right headlight']
car_parts_map = dict(zip(car_parts, car_parts_en))
severities = {1: 'Mineur (Rayures)', 2: 'Mod√©r√© (Bosses)', 3: 'Grave (Fissures, Cassures)'}
severity_descriptions = {
    1: "Rayures superficielles, √©raflures mineures, petites √©cailles de peinture",
    2: "Bosses visibles, dommages partiels aux composants, rayures profondes",
    3: "Dommages structurels, composants cass√©s, fissures profondes n√©cessitant un remplacement complet"
}

def format_currency(amount):
    return f"{amount:,.2f} MAD"

def get_cost_category(cost):
    if cost < 1000:
        return "Bas", "üü¢"
    elif cost < 3000:
        return "Moyen", "üü°"
    else:
        return "√âlev√©", "üî¥"

def validate_input_data(brand, model_name, year, damaged_part, severity):
    """Valide les donn√©es d'entr√©e avant le calcul du co√ªt"""
    if not brand or not model_name or not year or not damaged_part or not severity:
        st.error("Tous les champs sont obligatoires")
        return False
        
    if year < 2005 or year > 2024:
        st.error("L'ann√©e doit √™tre comprise entre 2005 et 2024")
        return False
        
    if brand not in brands:
        st.error("Marque de voiture non valide")
        return False
        
    if model_name not in models[brand]:
        st.error("Mod√®le de voiture non valide")
        return False
        
    if damaged_part not in car_parts:
        st.error("Partie endommag√©e non valide")
        return False
        
    if severity not in severities:
        st.error("Niveau de s√©v√©rit√© non valide")
        return False
        
    return True

def analyze_image_with_gemini(image):
    prompt = """
    Veuillez analyser cette image de voiture et extraire les informations suivantes :
    - Marque et mod√®le de la voiture
    - Ann√©e de fabrication estim√©e
    - Partie endommag√©e
    - S√©v√©rit√© des dommages (r√©pondez avec un nombre : 1 pour Mineur, 2 pour Mod√©r√©, 3 pour Grave)
    - Br√®ve description
    - Co√ªt estim√© de r√©paration en MAD

    R√©pondez en JSON :
    {
        "brand": "...",
        "model": "...",
        "year": 2020,
        "damaged_part": "...",
        "severity": 1,
        "damage_description": "...",
        "estimated_cost": 2500
    }
    """
    try:
        import io
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format=image.format if image.format else 'JPEG')
        img_byte_arr = img_byte_arr.getvalue()

        image_part = {"mime_type": "image/jpeg", "data": img_byte_arr}
        
        response = model.generate_content([prompt, image_part])
        response_text = response.text
        
        match = re.search(r"\{.*\}", response_text, re.DOTALL)
        if not match:
            st.error("Format de r√©ponse invalide de l'IA")
            return None
            
        try:
            result = json.loads(match.group(0))
            
            # Validation des champs requis
            required_fields = ['brand', 'model', 'year', 'damaged_part', 'severity', 'damage_description']
            for field in required_fields:
                if field not in result:
                    st.error(f"Champ manquant dans la r√©ponse de l'IA : {field}")
                    return None
            
            # Conversion et validation de la s√©v√©rit√©
            if isinstance(result.get('severity'), str):
                severity_num = int(''.join(filter(str.isdigit, result['severity']))[:1])
                result['severity'] = min(max(severity_num, 1), 3)
            elif not isinstance(result.get('severity'), int):
                st.error("Format de s√©v√©rit√© invalide")
                return None
            
            # Validation de l'ann√©e
            try:
                result['year'] = int(result['year'])
                if result['year'] < 2005 or result['year'] > 2024:
                    result['year'] = 2020  # Valeur par d√©faut
            except (ValueError, TypeError):
                result['year'] = 2020
            
            # Mapping des noms de pi√®ces
            for fr, en in car_parts_map.items():
                if result.get("damaged_part", "").lower() in en.lower():
                    result["damaged_part"] = fr
                    break
            
            # Validation de la marque
            if result.get('brand') not in brands:
                result['brand'] = brands[0]
            
            return result
            
        except json.JSONDecodeError:
            st.error("Erreur de format dans la r√©ponse de l'IA")
            return None
    except Exception as e:
        st.error(f"Erreur lors de l'analyse de l'image: {str(e)}")
        return None

st.markdown("<div class='main-header'>üöó Analyseur de Dommages Auto Pro</div>", unsafe_allow_html=True)

if 'history' not in st.session_state:
    st.session_state.history = []

default_brand = brands[0]
default_model = models[default_brand][0]
default_year = 2020
default_damaged_part = car_parts[0]
default_severity = 1

tab1, tab2 = st.tabs(["üìù Saisie Manuelle", "üì∏ Analyse par Photo"])

with tab1:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("<div class='section-header'>üöò D√©tails du V√©hicule</div>", unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        brand = st.selectbox("Marque de Voiture", brands, index=brands.index(default_brand))
        model_name = st.selectbox("Mod√®le de Voiture", models[brand], index=0)
        year = st.number_input("Ann√©e de la Voiture", min_value=2005, max_value=2024, value=default_year)

    with col2:
        damaged_part = st.selectbox(
            "Partie Endommag√©e",
            car_parts,
            index=car_parts.index(default_damaged_part),
            format_func=lambda x: f"{x} ({car_parts_map.get(x, x)})"
        )
        severity = st.selectbox(
            "S√©v√©rit√© des Dommages",
            options=list(severities.keys()),
            format_func=lambda x: severities[x],
            index=default_severity - 1
        )

    st.markdown(f"<div class='info-box'>{severity_descriptions[severity]}</div>", unsafe_allow_html=True)

    if st.button("Calculer le Co√ªt de R√©paration", key="calculate_btn", use_container_width=True):
        if not validate_input_data(brand, model_name, year, damaged_part, severity):
            st.stop()
        
        with st.spinner("Calcul du co√ªt de r√©paration..."):
            try:
                input_data = pd.DataFrame([{
                    'Brand': brand,
                    'Model': model_name,
                    'Year': year,
                    'Damaged_Part': damaged_part,
                    'Damage_Severity': severity
                }])

                input_encoded = preprocessor.transform(input_data)
                predicted_cost = best_model.predict(input_encoded)[0]

                parts_ratio = 0.4 if severity == 1 else 0.5 if severity == 2 else 0.6
                labor_hours = 2 if severity == 1 else 4 if severity == 2 else 7
                labor_cost = labor_hours * 150

                parts_cost = predicted_cost * parts_ratio
                painting_cost = predicted_cost - parts_cost - labor_cost

                if painting_cost < 0:
                    painting_cost = 0
                    total_fixed = parts_cost + labor_cost
                    if total_fixed > 0:
                        ratio = predicted_cost / total_fixed
                        parts_cost *= ratio
                        labor_cost *= ratio

                st.markdown("### üí∞ Estimation des Co√ªts")
                cost_category, emoji = get_cost_category(predicted_cost)
                cost_class = "cost-low" if predicted_cost < 1000 else "cost-medium" if predicted_cost < 3000 else "cost-high"
                st.markdown(f"<div class='highlight'><h2 class='{cost_class}'>{emoji} {format_currency(predicted_cost)}</h2></div>", unsafe_allow_html=True)

                st.markdown(f"""
                <div class='cost-breakdown'>
                    <div class='cost-item parts'>
                        <h3>Pi√®ces</h3>
                        <p>{format_currency(parts_cost)}</p>
                    </div>
                    <div class='cost-item labor'>
                        <h3>Main d'≈ìuvre</h3>
                        <p>{format_currency(labor_cost)}</p>
                    </div>
                    <div class='cost-item painting'>
                        <h3>Peinture</h3>
                        <p>{format_currency(painting_cost)}</p>
                    </div>
                </div>
                """, unsafe_allow_html=True)

                st.markdown("<div class='section-header'>‚è± Calendrier de R√©paration</div>", unsafe_allow_html=True)
                st.markdown(f"""
                <div class="timeline">
                    <div class="timeline-item left">
                        <div class="timeline-content">
                            <h4>√âvaluation Initiale</h4>
                            <p>1-2 heures</p>
                        </div>
                    </div>
                    <div class="timeline-item right">
                        <div class="timeline-content">
                            <h4>Commande des Pi√®ces</h4>
                            <p>1-2 jours</p>
                        </div>
                    </div>
                    <div class="timeline-item left">
                        <div class="timeline-content">
                            <h4>Travaux de R√©paration</h4>
                            <p>{labor_hours} heures</p>
                        </div>
                    </div>
                    <div class="timeline-item right">
                        <div class="timeline-content">
                            <h4>Inspection Finale</h4>
                            <p>1-2 heures</p>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

            except Exception as e:
                st.error(f"Erreur lors du calcul du co√ªt: {str(e)}")
                st.error("Veuillez v√©rifier vos entr√©es et r√©essayer")
    else:
        st.info("Remplissez les d√©tails et cliquez sur 'Calculer le Co√ªt de R√©paration' pour obtenir une estimation")

    st.markdown("</div>", unsafe_allow_html=True)

with tab2:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("<div class='section-header'>üì∏ Analyse Automatique par Photo</div>", unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader("T√©l√©chargez une photo du dommage", type=["jpg", "jpeg", "png"])
    
    if uploaded_file is not None:
        try:
            image = Image.open(uploaded_file)
            st.image(image, caption="Image t√©l√©charg√©e", use_container_width=True)
            
            with st.spinner("Analyse de l'image en cours..."):
                result = analyze_image_with_gemini(image)
                
                if result:
                    st.success("Analyse compl√©t√©e!")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("### üöó D√©tails du V√©hicule")
                        st.write(f"**Marque:** {result['brand']}")
                        st.write(f"**Mod√®le:** {result['model']}")
                        st.write(f"**Ann√©e:** {result['year']}")
                    
                    with col2:
                        st.markdown("### üîç Analyse des Dommages")
                        st.write(f"**Partie endommag√©e:** {result['damaged_part']}")
                        st.write(f"**S√©v√©rit√©:** {result['severity']}")
                        st.write(f"**Description:** {result['damage_description']}")
                    
                    try:
                        input_data = pd.DataFrame([{
                            'Brand': result['brand'],
                            'Model': result['model'],
                            'Year': result['year'],
                            'Damaged_Part': result['damaged_part'],
                            'Damage_Severity': int(result['severity'].split()[0]) if isinstance(result['severity'], str) else result['severity']
                        }])
                        
                        input_encoded = preprocessor.transform(input_data)
                        predicted_cost = best_model.predict(input_encoded)[0]
                        
                        st.markdown("### üí∞ Estimation des Co√ªts")
                        cost_category, emoji = get_cost_category(predicted_cost)
                        cost_class = "cost-low" if predicted_cost < 1000 else "cost-medium" if predicted_cost < 3000 else "cost-high"
                        st.markdown(f"<div class='highlight'><h2 class='{cost_class}'>{emoji} {format_currency(predicted_cost)}</h2></div>", unsafe_allow_html=True)
                        
                    except Exception as e:
                        st.error(f"Erreur lors du calcul du co√ªt: {e}")
                        st.write("Utilisez l'onglet 'Saisie Manuelle' pour une estimation pr√©cise.")
                else:
                    st.error("Impossible d'analyser l'image. Veuillez r√©essayer avec une autre photo ou utiliser la saisie manuelle.")
        except Exception as e:
            st.error(f"Erreur lors du traitement de l'image: {e}")
    else:
        st.info("T√©l√©chargez une photo claire du dommage pour obtenir une estimation automatique.")
    
    st.markdown("</div>", unsafe_allow_html=True)
